# Jay grammar
# Copyright (C) 2022  Loris Cuntreri

# Types
<int> ::= [0-9]+
<float> ::= [0-9]+ "." [0-9]+
<string> ::=
    "\"" ( ( 
      [a-z]+ 
    | [A-Z]+ )+
    | ( [A-Z]+
    | [a-z]+
           )+ )+ "\""

<char> ::= "'" ( [a-z] | [A-Z] ) "'"

<type_def> ::=
    "int"
    | "float"
    | "char"
    | "string"
    | "void"


# Operators
<math_op> ::=
    "+"
    | "-"
    | "*"
    | "/"
    | "%"

<bin_op> ::=
    "=="
    | "!="
    | "<"
    | ">"
    | "<=" 
    | ">="

<un_op> ::=
      "!"
    | "-"
    
<logic_op> ::=
      "&&"
    | "||"


# Expressions
<expr> ::=
      <expr> <bin_op> <expr> 
    | <expr> <un_op>
    | <expr> <logic_op> <expr>
    | <expr> <math_op> <expr>
    | <int>
    | <float>
    | <string>
    | <char>
    | <identifier>


# Variables
<identifier> ::=
      (
          [a-z]+
        | [A-Z]+
      )+
    | (
          [A-Z]+
        | [a-z]+
      )+

<ass_operator> ::=
      "=" 
    | "+="
    | "-=" 
    | "*=" 
    | "/=" 
    | "%="

<var_def> ::= 
    ( 
      "let" 
    | "var" 
    | "const" 
    ) " "

<var_decl> ::= <var_def>  <identifier> ":" <type_def> <ass_operator> <expr>


# Functions
<params> ::=
      ( "(" <identifier> ":" <type_def> ( "," <identifier> ":" <type_def>)* ")" ) 
    | "()"

<func_def> ::=
      "func " <identifier> <params> ":" <type_def>  ( "{" <expr>+ <return_stmt>  "}" ) 
    | "{}"

<func_call> ::= <identifier> <params>

# True and False
<true> ::= "true"
<false> ::= "false"


# Dot notation
<dot_expr> ::= <identifier> "." <identifier>



# Comments
<comment_single> ::= "//" ( [a-z]+ | [A-Z]+ )+
<comment_multi> ::= "/*" ( [a-z]+ | [A-Z]+ )+ "*/"
<comment> ::= <comment_single> | <comment_multi>


# Statements
<if_stmt> ::= 
      "if" "(" <expr> ")" "{" <expr>+ "}" 
    | "if" "(" <expr> ")" "{" <expr>+ "}" <elif_stmt>
    | "if" "(" <expr> ")" "{" <expr>+ "}" "else" "{" <expr>+ "}"

<elif_stmt> ::= 
      "elif" "(" <expr> ")" "{" <expr>+ "}"
    | "elif" "(" <expr> ")" "{" <expr>+ "}" <elif_stmt>
    | "else" "(" <expr> ")" "{" <expr>+ "}"

<else_stmt> ::= "else" "{" <expr>+ "}"
<while_stmt> ::= "while" "(" <expr> ")" "{" <expr>+ "}"
<for_stmt> ::= "for" "(" <identifier> ":" <expr> ";" <expr> ";" <expr> ")" "{" <expr>+ "}"
<return_stmt> ::= "return" <expr>
<stmt> ::=
      <var_decl> 
    | <func_def> 
    | <func_call>
    | <if_stmt> 
    | <while_stmt> 
    | <for_stmt> 
    | <return_stmt>
    | <comment>


# Program
<program> ::= <stmt>+ ";"