// This is a comment
/*
This is a multi-line comment
*/

import thing from "./thing.jay";
import {thing1, thing2} from "./things.jay";

// type is a keyword to define custom types
type MyType {
    a: string;
    b: int;
}

func example(): MyType {
    return {
        a: "hello",
        b: 10
    };
}

func main(): int {
    // var is a variable that can change it's value
    // defined either before or after compilation
    var a: int[] = [1, 2, 3];
    var b: float = 2.00;
    var c: string = "Hello";

    // let is a variable that cannot change it's value
    // defined either before or after compilation
    let d: bool = true;
    let e: bool = false;
    let f: char[] = ['a', 'b', 'c'];

    // const is a variable that cannot change
    // it's value defined before compilation
    const g: MyType = example();
    
    // lambda functions are a thing
    let h: int = lamb(lmao: int): int -> lmao + 19;

    // you can access the fields of a struct using dot notation
    g.a;
    g.b;

    // you can use the imported code from the other file
    thing();
    thing1();
    thing2();
    
    // lambda functions can be used as a normal function
    h(88);

    // there are two types of equals in jay.
    // the first is '==' and the second is '==='.
    // the first check only the values in the condition, meaning that 1 == "1" is true
    if (a == 1) {
        // if statement
        
        // the second checks the type and value of the condition, meaning that 1 === "1" is false
    } else if (a === 1) {
        // else if block
    } else {
        // else block
    }

    // while loop
    while (a == 1) {
        // break is used to break out of a loop
        break;

        // breakif is used to break out of a loop if a condition is met
        // it can be used in all the statements and block that can break
        breakif (a == 2);

        // continue is used to continue to the next iteration
        continue;
    }

    for i in i...10 | i++ {
        // for statement
    }

    // switch statement
    switch a {
        case 1 {
            // case 1
            break;
        }
        case 2 {
            // case 2
            break;
        }
        default{
            // default
            break;
        }
    }

    // return is used to return a value from a function
    return 0;

    // returnif can be used to execute some code when
    // condition is met, it needs to return a value
    returnif (a == 1) {

    };
}

export {example, MyType};
