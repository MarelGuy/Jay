// This test is not working yet

// Of course, the standard library has not been designed yet
import std from std;

type weird_type {
    func new(a: int): weird_type,
    num_weird: int,
}

weird_type:::new(a: int): weird_type {
    return weird_type{ a };
}

func main(): int {
    const num_0: int = 3;
    const num_1: int = 4;
    
    var num_array_0: int[5] = [];
    
    if num_0 < num_1 {
        for i in 5 {
            num_array_0[i] += i;
        }
    } else {
        var i: int = 0;

      while i > 10 {
            num_array_0[i] += i;
        }
    }

    let num_2: int = use_switch(num_array_0);

    var weird_0: weird_type = weird_type::new(3);

    weird_0.num_weird + 3;
}

func use_switch(num_array_23: int[]): string {
    var num_temp: int = 0;

    switch {
        case num_array_0[5] + 6 = 10 {
            num_temp = 5;
        }

        case num_array_0[10] + 1 = 10 {
            num_temp += 3;
        }
    }

    return_if num_temp = 8 num_temp;

    num_temp = 0;

    return num_temp
}

export weird_type;